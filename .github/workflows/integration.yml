# TODO(#158): replace current ci with real service integration test.
name: 'integration'

on:
  workflow_dispatch:

env:
  REGISTRY_HOST: 'us-docker.pkg.dev'
  REGISTRY: 'us-docker.pkg.dev/jvs-ci-test/ci-images'
  DOCKER_TAG: '${{ github.sha }}'
  WIF_PROVIDER: 'projects/1096923323432/locations/global/workloadIdentityPools/github-pool-fd98/providers/github-provider'
  WIF_SERVICE_ACCOUNT: 'jvs-fd98-ci-sa@jvs-ci-test.iam.gserviceaccount.com'

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}-test-unit'
  cancel-in-progress: true

jobs:
  # Linting jobs - terraform, go, java
  terraform_lint:
    uses: 'abcxyz/pkg/.github/workflows/terraform-lint.yml@main' # ratchet:exclude
    with:
      directory: 'terraform'
      terraform_version: '1.2'

  go_lint:
    uses: 'abcxyz/pkg/.github/workflows/go-lint.yml@main' # ratchet:exclude
    with:
      go_version: '1.20'

  java_lint:
    uses: 'abcxyz/pkg/.github/workflows/java-lint.yml@main' # ratchet:exclude
    with:
      java_version: '11'

  # Unit tests - go, java
  go_test:
    uses: 'abcxyz/pkg/.github/workflows/go-test.yml@main' # ratchet:exclude
    with:
      go_version: '1.20'

  java_test:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3' # ratchet:actions/checkout@v3
      # Technically we don't need this step since we don't need anything from Artifact Registry.
      # But the Artifact Registry wagon will keep retrying the authentication and blocking
      # the unit test for a long time (likely a bug). As a result, we add this step to make
      # the wagon happy.
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          # The Artifact Registry maven wagon looks for Google Application Default Credentials.
          # https://github.com/GoogleCloudPlatform/artifact-registry-maven-tools
      - name: Run test script
        run: |-
          mvn clean test --no-transfer-progress -f client-lib/java

  # lint_and_unit is a virtual job that is used as dependencies for later jobs.
  lint_and_unit:
    runs-on: 'ubuntu-latest'
    needs:
      - 'terraform_lint'
      - 'go_lint'
      - 'java_lint'
      - 'go_test'
      - 'java_test'
    steps:
      - run: 'echo prechecks complete'

  # Build JVS services and push to artifact registry.
  build:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
    needs:
      - 'lint_and_unit'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3' # ratchet:actions/checkout@v3
      - name: 'Setup Go'
        uses: 'actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9' # ratchet:actions/setup-go@v4
        with:
          go-version: '1.20'
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      - name: 'Authenticate to Artifact Registry'
        uses: 'docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a' # ratchet:docker/login-action@v2
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.REGISTRY_HOST }}'
      # goreleaser requires a tag to publish images to container registry.
      # We create a local tag to make it happy.
      - run: |-
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -f `date "+%Y%m%d%H%M%S"`
      - name: 'Build the service containers and push to the registry with goreleaser'
        uses: 'goreleaser/goreleaser-action@f82d6c1c344bcacabba2c841718984797f664a6b' # ratchet:goreleaser/goreleaser-action@v4
        with:
          version: 'v1.15.2' # Manually pinned
          args: 'release -f .goreleaser.docker.yaml --rm-dist --skip-validate'

  # Deploy integration test infrastructure and run integration tests
  integration:
    runs-on: 'ubuntu-latest'
    needs:
      - 'build'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3' # ratchet:actions/checkout@v3
      - id: 'auth'
        uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      # TODO: Workload Identity doesn't work with GCS Provider.
      # https://github.com/google-github-actions/auth/issues/89
      - name: 'Workaround Terraform issue'
        shell: 'bash'
        run: |-
          echo "GOOGLE_OAUTH_ACCESS_TOKEN=${{ steps.auth.outputs.access_token }}" >> $GITHUB_ENV
      - uses: 'hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1' # ratchet:hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: 'Setup Go'
        uses: 'actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9' # ratchet:actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: 'Deploy and Run integration tests'
        env:
          BUILD_COMMON: false
          PROJECT_ID: "jvs-ci-test"
          API_SA: "jvs-api@jvs-ci-test.iam.gserviceaccount.com"
          UI_SA: "jvs-ui@jvs-ci-test.iam.gserviceaccount.com"
          CERT_ROTATOR_SA: "jvs-cert-rotator@jvs-ci-test.iam.gserviceaccount.com"
          PUBLIC_KEY_SA: "jvs-public-key@jvs-ci-test.iam.gserviceaccount.com"
          KMS_KEYRING_ID: "projects/jvs-ci-test/locations/global/keyRings/jvs-keyring-156a"
          API_IMAGE: "${{env.REGISTRY}}/jvs-justification:${{env.DOCKER_TAG}}-amd64"
          UI_IMAGE: "${{env.REGISTRY}}/jvs-ui:${{env.DOCKER_TAG}}-amd64"
          CERT_ROTATOR_IMAGE: "${{env.REGISTRY}}/jvs-cert-rotation:${{env.DOCKER_TAG}}-amd64"
          PUBLIC_KEY_IMAGE: "${{env.REGISTRY}}/jvs-public-key:${{env.DOCKER_TAG}}-amd64"
        run: ./scripts/integration.sh
