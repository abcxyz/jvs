name: 'integration'

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
  workflow_call:

env:
  REGISTRY_HOST: 'us-docker.pkg.dev'
  CONTAINER_REGISTRY: 'us-docker.pkg.dev/jvs-ci-test/ci-images'
  # DOCKER_TAG: '${{ github.sha }}'
  DOCKER_TAG: '90016c79849cbfa49e7e1d40051b82d78da0f847'
  WIF_PROVIDER: 'projects/1096923323432/locations/global/workloadIdentityPools/github-pool-fd98/providers/github-provider'
  WIF_SERVICE_ACCOUNT: 'jvs-fd98-ci-sa@jvs-ci-test.iam.gserviceaccount.com'

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}-test-unit'
  cancel-in-progress: true

jobs:
  # Linting jobs - terraform, go, java
  terraform_lint:
    uses: 'abcxyz/pkg/.github/workflows/terraform-lint.yml@main' # ratchet:exclude
    with:
      directory: 'terraform'
      terraform_version: '1.2'

  go_lint:
    uses: 'abcxyz/pkg/.github/workflows/go-lint.yml@main' # ratchet:exclude
    with:
      go_version: '1.20'

  java_lint:
    uses: 'abcxyz/pkg/.github/workflows/java-lint.yml@main' # ratchet:exclude
    with:
      java_version: '11'

  # Unit tests - go, java
  go_test:
    uses: 'abcxyz/pkg/.github/workflows/go-test.yml@main' # ratchet:exclude
    with:
      go_version: '1.20'

  java_test:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3' # ratchet:actions/checkout@v3
      # Technically we don't need this step since we don't need anything from Artifact Registry.
      # But the Artifact Registry wagon will keep retrying the authentication and blocking
      # the unit test for a long time (likely a bug). As a result, we add this step to make
      # the wagon happy.
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          # The Artifact Registry maven wagon looks for Google Application Default Credentials.
          # https://github.com/GoogleCloudPlatform/artifact-registry-maven-tools
      - name: Run test script
        run: |-
          mvn clean test --no-transfer-progress -f client-lib/java

  # lint_and_unit is a virtual job that is used as dependencies for later jobs.
  lint_and_unit:
    runs-on: 'ubuntu-latest'
    needs:
      - 'terraform_lint'
      - 'go_lint'
      - 'java_lint'
      - 'go_test'
      - 'java_test'
    steps:
      - run: 'echo prechecks complete'

  # Build JVS services and push to artifact registry.
  # build:
  #   runs-on: 'ubuntu-latest'
  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'
  #   needs:
  #     - 'lint_and_unit'
  #   steps:
  #     - name: 'Checkout'
  #       uses: 'actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3' # ratchet:actions/checkout@v3
  #     - name: 'Setup Go'
  #       uses: 'actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9' # ratchet:actions/setup-go@v4
  #       with:
  #         go-version: '1.20'
  #     - id: 'auth'
  #       name: 'Authenticate to Google Cloud'
  #       uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
  #       with:
  #         workload_identity_provider: '${{ env.WIF_PROVIDER }}'
  #         service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
  #         token_format: 'access_token'
  #     - name: 'Authenticate to Artifact Registry'
  #       uses: 'docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a' # ratchet:docker/login-action@v2
  #       with:
  #         username: 'oauth2accesstoken'
  #         password: '${{ steps.auth.outputs.access_token }}'
  #         registry: '${{ env.REGISTRY_HOST }}'
  #     # goreleaser requires a tag to publish images to container registry.
  #     # We create a local tag to make it happy.
  #     - run: |-
  #         git config user.name "${GITHUB_ACTOR}"
  #         git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
  #         git tag -f -a v0.0.0-ci -m "CI run"
  #     - name: 'Build the service containers and push to the registry with goreleaser'
  #       uses: 'goreleaser/goreleaser-action@f82d6c1c344bcacabba2c841718984797f664a6b' # ratchet:goreleaser/goreleaser-action@v4
  #       with:
  #         version: 'v1.16.2' # Manually pinned
  #         args: 'release -f .goreleaser.docker.yaml --clean --skip-validate'

  # Deploy integration test infrastructure and run integration tests
  integration:
    runs-on: 'ubuntu-latest'
    # needs:
    #   - 'build'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      TF_MODULE_DIR: "./terraform/modules/jvs-services"
      INTEG_TEST_PROJECT_ID: "jvs-ci-test"
      INTEG_TEST_API_SA: "jvs-api@jvs-ci-test.iam.gserviceaccount.com"
      INTEG_TEST_UI_SA: "jvs-ui@jvs-ci-test.iam.gserviceaccount.com"
      INTEG_TEST_CERT_ROTATOR_SA: "jvs-cert-rotator@jvs-ci-test.iam.gserviceaccount.com"
      INTEG_TEST_PUBLIC_KEY_SA: "jvs-public-key@jvs-ci-test.iam.gserviceaccount.com"
      INTEG_TEST_KMS_KEYRING_ID: "projects/jvs-ci-test/locations/global/keyRings/jvs-keyring-156a"
    steps:
      - uses: 'actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3' # ratchet:actions/checkout@v3
      - id: 'auth'
        uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      # TODO: Workload Identity doesn't work with GCS Provider.
      # https://github.com/google-github-actions/auth/issues/89
      - name: 'Workaround Terraform issue'
        shell: 'bash'
        run: |-
          echo "GOOGLE_OAUTH_ACCESS_TOKEN=${{ steps.auth.outputs.access_token }}" >> $GITHUB_ENV
      - uses: 'hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1' # ratchet:hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: 'Write tfvars file'
        run: |-
          VAR_FILE=/tmp/jvs_ci.tfvars

          touch /tmp/jvs_ci.tfvars
          echo project_id=\"${{ env.INTEG_TEST_PROJECT_ID }}\" >> ${VAR_FILE};
          echo jvs_api_service_account=\"${{ env.INTEG_TEST_API_SA }}\" >> ${VAR_FILE};
          echo jvs_ui_service_account=\"${{ env.INTEG_TEST_UI_SA }}\" >> ${VAR_FILE};
          echo jvs_cert_rotator_service_account=\"${{ env.INTEG_TEST_CERT_ROTATOR_SA}}\" >> ${VAR_FILE};
          echo jvs_public_key_service_account=\"${{ env.INTEG_TEST_PUBLIC_KEY_SA }}\" >> ${VAR_FILE};
          echo jvs_container_image=\"${{ env.CONTAINER_REGISTRY }}/jvsctl:${{ env.DOCKER_TAG }}-amd64\" >> ${VAR_FILE};
          echo kms_keyring_id=\"${{ env.INTEG_TEST_KMS_KEYRING_ID }}\" >> ${VAR_FILE};
          echo kms_key_name=\"jvs-key-$RANDOM\" >> ${VAR_FILE};
          echo kms_key_rotation_minutes=0 >> ${VAR_FILE};

          cat ${VAR_FILE};
          echo "TFVAR_FILE=${VAR_FILE}" >> $GITHUB_ENV;
      - name: 'Init the terraform infrastructure'
        run: terraform -chdir=${{ env.TF_MODULE_DIR }} init
      - name: 'Apply the infrastructure updates'
        id: 'tf_apply'
        run: |-
          terraform -chdir=${{ env.TF_MODULE_DIR}} apply -auto-approve -var-file=${{ env.TFVAR_FILE }};

          echo "INTEG_TEST_JVS_API_URL=$(terraform -chdir=${{ env.TF_MODULE_DIR}} output -raw jvs_api_service_url)" >> $GITHUB_ENV;
          echo "INTEG_TEST_JVS_UI_URL=$(terraform -chdir=${{ env.TF_MODULE_DIR}} output -raw jvs_ui_service_url)" >> $GITHUB_ENV;
          echo "INTEG_TEST_PUBLIC_KEY_URL=$(terraform -chdir=${{ env.TF_MODULE_DIR}} output -raw jvs_public_key_service_url)" >> $GITHUB_ENV;
          echo "INTEG_TEST_CERT_ROTATOR_URL=$(terraform -chdir=${{ env.TF_MODULE_DIR}} output -raw jvs_cert_rotator_service_url)" >> $GITHUB_ENV;
      - id: 'cert-rotator-auth-id'
        name: 'Authenticate to Cert Rotator'
        uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'id_token'
          id_token_audience: ${{ env.INTEG_TEST_CERT_ROTATOR_URL }}
          id_token_include_email: true
          create_credentials_file: false
      - id: 'jvs-api-auth-token'
        name: 'Authenticate to JVS API service'
        uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'id_token'
          id_token_audience: ${{ env.INTEG_TEST_JVS_API_URL }}
          id_token_include_email: true
          create_credentials_file: false
      - name: 'Setup Go'
        uses: 'actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9' # ratchet:actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: 'Install jvsctl'
        run: |
          go install github.com/abcxyz/jvs/cmd/jvsctl@latest
      - name: 'Run tests'
        env:
          TEST_INTEGRATION: 'true'
          INTEG_TEST_CERT_TOTATOER_AUTH_TOKEN: ${{ steps.cert-rotator-auth-id.outputs.id_token }}
          INTEG_TEST_JVS_API_AUTH_TOKEN: ${{ steps.jvs-api-auth-token.outputs.id_token }}
        run: |-
          go test ./test/integration -timeout=15m
      - name: 'Cleanup the infrastructure'
        if: always()
        run: |-
          terraform -chdir=${{ env.TF_MODULE_DIR}} apply -destroy -auto-approve -var-file=${{ env.TFVAR_FILE }};
