# TODO(sethvargo): Create cleanup policy for autopush env

# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'ci'

on:
  pull_request:
    branches:
      - 'main'
      - 'release/**/*'

concurrency:
  group: '${{ github.workflow }}-${{ github.event_name}}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  # Go
  GOPROXY: 'https://proxy.golang.org,direct'

  # Computed GitHub attributes
  UNIQUE_ID: '${{ github.workflow }}-${{ github.run_id }}-${{ github.run_attempt }}'

jobs:
  terraform-lint:
    uses: 'abcxyz/pkg/.github/workflows/terraform-lint.yml@main' # ratchet:exclude
    with:
      directory: 'terraform'
      terraform_version: '1.3'

  yaml-lint:
    uses: 'abcxyz/pkg/.github/workflows/yaml-lint.yml@main' # ratchet:exclude

  go-lint:
    uses: 'abcxyz/pkg/.github/workflows/go-lint.yml@main' # ratchet:exclude

  java-lint:
    uses: 'abcxyz/pkg/.github/workflows/java-lint.yml@main' # ratchet:exclude
    with:
      java_version: '11'

  go-test:
    uses: 'abcxyz/pkg/.github/workflows/go-test.yml@main' # ratchet:exclude

  java-test:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'actions/checkout@v4'

      # We don't actually need to authenticate here, but the Artifact Regsitry
      # Wagon[1] expects authentication and infinitely retries if it does not
      # find any.
      #
      # [1]: https://github.com/GoogleCloudPlatform/artifact-registry-maven-tools
      - uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ vars.WIF_PROVIDER }}'
          service_account: '${{ vars.WIF_SERVICE_ACCOUNT }}'

      - name: 'Run tests'
        run: |-
          mvn clean flatten:flatten test --no-transfer-progress -f client-lib/java

  build:
    uses: './.github/workflows/build.yml'
    with:
      # version is the same as `${UNIQUE_ID}`, but there's no way to reference
      # the "env" context from above in reusable workflows[1].
      #
      # [1]: https://github.com/orgs/community/discussions/26671
      version: '${{ github.workflow }}-${{ github.run_id }}-${{ github.run_attempt }}'

  integration:
    runs-on: 'ubuntu-latest'
    needs:
      - 'build'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      API_SERVICE_NAME: 'jvs-api-4527'
      CERT_ROTATOR_SERVICE_NAME: 'jvs-cert-rotator-e04a'
      PUBLIC_KEY_SERVICE_NAME: 'jvs-public-key-f22e'
      UI_SERVICE_NAME: 'jvs-ui-8ab7'
      SERVICES_URL_POSTFIX: '2nhpyabgtq-uc.a.run.app'
      KMS_KEYRING_NAME: 'projects/${{ vars.PROJECT_ID }}/locations/global/keyRings/jvs-keyring-0666'
    steps:
      - uses: 'actions/checkout@v4'

      - uses: 'actions/setup-go@v5'
        with:
          go-version-file: 'go.mod'

      - uses: 'google-github-actions/auth@v2'
        id: 'auth'
        with:
          workload_identity_provider: '${{ vars.WIF_PROVIDER }}'
          service_account: '${{ vars.WIF_SERVICE_ACCOUNT }}'

      - name: 'Update services'
        env:
          CONTAINER_REGISTRY: '${{ vars.AUTOPUSH_CONTAINER_REGISTRY }}'
          PROJECT_ID: '${{ vars.PROJECT_ID }}'
          SERVICES: '${{ env.API_SERVICE_NAME }} ${{ env.CERT_ROTATOR_SERVICE_NAME }} ${{ env.PUBLIC_KEY_SERVICE_NAME }} ${{ env.UI_SERVICE_NAME }}'
        run: |-
          for SERVICE in ${SERVICES}; do
            echo "Updating ${SERVICE}..."
            gcloud run services update "${SERVICE}" \
              --quiet \
              --verbosity="warning" \
              --no-user-output-enabled \
              --project="${PROJECT_ID}" \
              --region="us-central1" \
              --image="${CONTAINER_REGISTRY}/jvsctl:${GITHUB_SHA}" \
              --tag="${UNIQUE_ID}" \
              --update-labels="sha=${GITHUB_SHA}" &
          done
          wait

      # Build ID tokens for each audience.
      - id: 'api-service-id-token'
        name: 'Get API Service ID token'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ vars.WIF_PROVIDER }}'
          service_account: '${{ vars.WIF_SERVICE_ACCOUNT }}'
          id_token_audience: 'https://${{ env.API_SERVICE_NAME }}-${{ env.SERVICES_URL_POSTFIX }}'
          id_token_include_email: true
          token_format: 'id_token'
          create_credentials_file: false
          export_environment_variables: false
      - id: 'ui-service-id-token'
        name: 'Get UI Service ID token'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ vars.WIF_PROVIDER }}'
          service_account: '${{ vars.WIF_SERVICE_ACCOUNT }}'
          id_token_audience: 'https://${{ env.UI_SERVICE_NAME }}-${{ env.SERVICES_URL_POSTFIX }}'
          id_token_include_email: true
          token_format: 'id_token'
          create_credentials_file: false
          export_environment_variables: false
      - id: 'cert-rotator-service-id-token'
        name: 'Get Cert Rotator ID token'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ vars.WIF_PROVIDER }}'
          service_account: '${{ vars.WIF_SERVICE_ACCOUNT }}'
          id_token_audience: 'https://${{ env.CERT_ROTATOR_SERVICE_NAME }}-${{ env.SERVICES_URL_POSTFIX }}'
          id_token_include_email: true
          token_format: 'id_token'
          create_credentials_file: false
          export_environment_variables: false

      - name: 'Run integration tests'
        env:
          TEST_INTEGRATION: 'true'
          PROJECT_ID: '${{ vars.PROJECT_ID }}'
          INTEG_TEST_API_SERVER: '${{ env.UNIQUE_ID }}---${{ env.API_SERVICE_NAME }}-${{ env.SERVICES_URL_POSTFIX }}:443'
          INTEG_TEST_API_SERVICE_ID_TOKEN: '${{ steps.api-service-id-token.outputs.id_token }}'
          INTEG_TEST_UI_SERVICE_ADDR: 'https://${{ env.UNIQUE_ID }}---${{ env.UI_SERVICE_NAME }}-${{ env.SERVICES_URL_POSTFIX }}'
          INTEG_TEST_UI_SERVICE_ID_TOKEN: '${{ steps.ui-service-id-token.outputs.id_token }}'
          INTEG_TEST_CERT_ROTATOR_SERVICE_ADDR: 'https://${{ env.UNIQUE_ID }}---${{ env.CERT_ROTATOR_SERVICE_NAME }}-${{ env.SERVICES_URL_POSTFIX }}'
          INTEG_TEST_CERT_ROTATOR_SERVICE_ID_TOKEN: '${{ steps.cert-rotator-service-id-token.outputs.id_token }}'
          INTEG_TEST_JWKS_ENDPOINT: 'https://${{ env.UNIQUE_ID }}---${{ env.PUBLIC_KEY_SERVICE_NAME }}-${{ env.SERVICES_URL_POSTFIX }}/.well-known/jwks'
          INTEG_TEST_WIF_SERVICE_ACCOUNT: '${{ vars.WIF_SERVICE_ACCOUNT }}'
        run: |-
          go test \
            -count=1 \
            -race \
            -shuffle=on \
            -timeout='10m' \
            ./test/integ/...
