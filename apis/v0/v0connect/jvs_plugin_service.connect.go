// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: jvs_plugin_service.proto

package v0connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v0 "github.com/abcxyz/jvs/apis/v0"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JVSPluginName is the fully-qualified name of the JVSPlugin service.
	JVSPluginName = "abcxyz.jvs.JVSPlugin"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JVSPluginValidateProcedure is the fully-qualified name of the JVSPlugin's Validate RPC.
	JVSPluginValidateProcedure = "/abcxyz.jvs.JVSPlugin/Validate"
	// JVSPluginGetUIDataProcedure is the fully-qualified name of the JVSPlugin's GetUIData RPC.
	JVSPluginGetUIDataProcedure = "/abcxyz.jvs.JVSPlugin/GetUIData"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	jVSPluginServiceDescriptor         = v0.File_jvs_plugin_service_proto.Services().ByName("JVSPlugin")
	jVSPluginValidateMethodDescriptor  = jVSPluginServiceDescriptor.Methods().ByName("Validate")
	jVSPluginGetUIDataMethodDescriptor = jVSPluginServiceDescriptor.Methods().ByName("GetUIData")
)

// JVSPluginClient is a client for the abcxyz.jvs.JVSPlugin service.
type JVSPluginClient interface {
	Validate(context.Context, *connect.Request[v0.ValidateJustificationRequest]) (*connect.Response[v0.ValidateJustificationResponse], error)
	GetUIData(context.Context, *connect.Request[v0.GetUIDataRequest]) (*connect.Response[v0.UIData], error)
}

// NewJVSPluginClient constructs a client for the abcxyz.jvs.JVSPlugin service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJVSPluginClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JVSPluginClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jVSPluginClient{
		validate: connect.NewClient[v0.ValidateJustificationRequest, v0.ValidateJustificationResponse](
			httpClient,
			baseURL+JVSPluginValidateProcedure,
			connect.WithSchema(jVSPluginValidateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUIData: connect.NewClient[v0.GetUIDataRequest, v0.UIData](
			httpClient,
			baseURL+JVSPluginGetUIDataProcedure,
			connect.WithSchema(jVSPluginGetUIDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// jVSPluginClient implements JVSPluginClient.
type jVSPluginClient struct {
	validate  *connect.Client[v0.ValidateJustificationRequest, v0.ValidateJustificationResponse]
	getUIData *connect.Client[v0.GetUIDataRequest, v0.UIData]
}

// Validate calls abcxyz.jvs.JVSPlugin.Validate.
func (c *jVSPluginClient) Validate(ctx context.Context, req *connect.Request[v0.ValidateJustificationRequest]) (*connect.Response[v0.ValidateJustificationResponse], error) {
	return c.validate.CallUnary(ctx, req)
}

// GetUIData calls abcxyz.jvs.JVSPlugin.GetUIData.
func (c *jVSPluginClient) GetUIData(ctx context.Context, req *connect.Request[v0.GetUIDataRequest]) (*connect.Response[v0.UIData], error) {
	return c.getUIData.CallUnary(ctx, req)
}

// JVSPluginHandler is an implementation of the abcxyz.jvs.JVSPlugin service.
type JVSPluginHandler interface {
	Validate(context.Context, *connect.Request[v0.ValidateJustificationRequest]) (*connect.Response[v0.ValidateJustificationResponse], error)
	GetUIData(context.Context, *connect.Request[v0.GetUIDataRequest]) (*connect.Response[v0.UIData], error)
}

// NewJVSPluginHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJVSPluginHandler(svc JVSPluginHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jVSPluginValidateHandler := connect.NewUnaryHandler(
		JVSPluginValidateProcedure,
		svc.Validate,
		connect.WithSchema(jVSPluginValidateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jVSPluginGetUIDataHandler := connect.NewUnaryHandler(
		JVSPluginGetUIDataProcedure,
		svc.GetUIData,
		connect.WithSchema(jVSPluginGetUIDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/abcxyz.jvs.JVSPlugin/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JVSPluginValidateProcedure:
			jVSPluginValidateHandler.ServeHTTP(w, r)
		case JVSPluginGetUIDataProcedure:
			jVSPluginGetUIDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJVSPluginHandler returns CodeUnimplemented from all methods.
type UnimplementedJVSPluginHandler struct{}

func (UnimplementedJVSPluginHandler) Validate(context.Context, *connect.Request[v0.ValidateJustificationRequest]) (*connect.Response[v0.ValidateJustificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("abcxyz.jvs.JVSPlugin.Validate is not implemented"))
}

func (UnimplementedJVSPluginHandler) GetUIData(context.Context, *connect.Request[v0.GetUIDataRequest]) (*connect.Response[v0.UIData], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("abcxyz.jvs.JVSPlugin.GetUIData is not implemented"))
}
