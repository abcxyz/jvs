// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cert_action_service.proto

package v0connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v0 "github.com/abcxyz/jvs/apis/v0"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CertificateActionServiceName is the fully-qualified name of the CertificateActionService service.
	CertificateActionServiceName = "abcxyz.jvs.CertificateActionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CertificateActionServiceCertificateActionProcedure is the fully-qualified name of the
	// CertificateActionService's CertificateAction RPC.
	CertificateActionServiceCertificateActionProcedure = "/abcxyz.jvs.CertificateActionService/CertificateAction"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	certificateActionServiceServiceDescriptor                 = v0.File_cert_action_service_proto.Services().ByName("CertificateActionService")
	certificateActionServiceCertificateActionMethodDescriptor = certificateActionServiceServiceDescriptor.Methods().ByName("CertificateAction")
)

// CertificateActionServiceClient is a client for the abcxyz.jvs.CertificateActionService service.
type CertificateActionServiceClient interface {
	CertificateAction(context.Context, *connect.Request[v0.CertificateActionRequest]) (*connect.Response[v0.CertificateActionResponse], error)
}

// NewCertificateActionServiceClient constructs a client for the abcxyz.jvs.CertificateActionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCertificateActionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CertificateActionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &certificateActionServiceClient{
		certificateAction: connect.NewClient[v0.CertificateActionRequest, v0.CertificateActionResponse](
			httpClient,
			baseURL+CertificateActionServiceCertificateActionProcedure,
			connect.WithSchema(certificateActionServiceCertificateActionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// certificateActionServiceClient implements CertificateActionServiceClient.
type certificateActionServiceClient struct {
	certificateAction *connect.Client[v0.CertificateActionRequest, v0.CertificateActionResponse]
}

// CertificateAction calls abcxyz.jvs.CertificateActionService.CertificateAction.
func (c *certificateActionServiceClient) CertificateAction(ctx context.Context, req *connect.Request[v0.CertificateActionRequest]) (*connect.Response[v0.CertificateActionResponse], error) {
	return c.certificateAction.CallUnary(ctx, req)
}

// CertificateActionServiceHandler is an implementation of the abcxyz.jvs.CertificateActionService
// service.
type CertificateActionServiceHandler interface {
	CertificateAction(context.Context, *connect.Request[v0.CertificateActionRequest]) (*connect.Response[v0.CertificateActionResponse], error)
}

// NewCertificateActionServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCertificateActionServiceHandler(svc CertificateActionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	certificateActionServiceCertificateActionHandler := connect.NewUnaryHandler(
		CertificateActionServiceCertificateActionProcedure,
		svc.CertificateAction,
		connect.WithSchema(certificateActionServiceCertificateActionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/abcxyz.jvs.CertificateActionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CertificateActionServiceCertificateActionProcedure:
			certificateActionServiceCertificateActionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCertificateActionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCertificateActionServiceHandler struct{}

func (UnimplementedCertificateActionServiceHandler) CertificateAction(context.Context, *connect.Request[v0.CertificateActionRequest]) (*connect.Response[v0.CertificateActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("abcxyz.jvs.CertificateActionService.CertificateAction is not implemented"))
}
